##
# Copyright 2012 FAU (Friedrich Alexander University of Erlangen-Nuremberg)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

++++++++++++
+ Building +
++++++++++++

	*********
	* LINUX *
	*********
	* First of all, build all the dependencies. This will take some time (~ 15 minutes)
	* There are several build-scripts, but build-dependencies.sh will run them all
	* You can run the scripts individually, e.g. if you want to rebuild 1 library, but be careful
	* some libraries depends on others (read comments in build-dependencies)

		$ cd dependencies
		$ ./build-dependencies

	* Go back to the main directory, run cmake with the appropriate options (see infos below) and finally make

		$ cd ..
		$ cmake .
		$ make

	* now, you'll find the executable in the bin subdirectory and can run it

		$ ./tri6

	* That's all

	***********
	* WINDOWS *
	***********
	* First of all, build all the dependencies. This will take some time
	* There are several build-scripts, but build-dependencies.bat will run them all
	* You can run the scripts individually, e.g. if you want to rebuild 1 library, but be careful
	* some libraries depends on others (read comments in build-dependencies)
	* build-dependencies.bat and the other build scripts require three tools:
	
		- WinRAR.exe (specify path in build-common.bat)
		- cmake (has to be in path)
		- Visual Studio
		
	* If all these programs are installed, you start the Visual Studio command line
	* (e.g. Start => All programs => Visual Studio => Visual Studio tools => VS2013 x86 Native Tools)
	* and move to i6engine directory. Then just follow the next steps:

		$ cd dependencies
		$ build-dependencies.bat

	* Go back to the main directory, run cmake with the appropriate options (see infos below) and you get your Visual Studio project

		$ cd ..
		$ cmake .

	* now you find a i6engine.sln file you can open in Visual Studio. You can compile it using F7. After this, all library files
	* and the executable are in the bin subdirectory and you can run it

		$ tri6.exe

	* That's all

+++++++++++++++++
+ CMAKE Options +
+++++++++++++++++

	* You can specifiy some build options with CMake parameters: (values are the defaults if not specified)

	- With Logging: ISIXE_LOGGING=OFF
	- With Network:	ISIXE_NETWORK=OFF
	- With Testing:	ISIXE_TESTING=OFF
	- With Profiling: ISIXE_PROFILING=OFF
	- With Scripting: ISIXE_SCRIPTING=ON
	- With Tri6: ISIXE_TRI6=ON

	* e.g. This line build the engine with logging, no network, no profiling, scripting, tri6 and no tests

		$ cmake -DISIXE_LOGGING=ON -DISIXE_NETWORKING=ON .

+++++++++++
+ Running +
+++++++++++

	* For running the program, there are several options as well:

	./tri6 [ [-ds] | [ [-dd level] [-mm] [-dm] [-remoteip ip-address] [-remoteport port] ] [-localport port] [-level levelname] [-loglevel loglevel]

	-dd <level>
		specifies the level of graphical debugging. (The values can be toggled ingame with the numblock keys 1-4, but this doesn't work quite well)
		0	completely off
		1	lines indicating the collisionshapes are drawn
		2	identical to 1
		3	draws the Ogre BoundingBoxes as well (not very helpful, huge performance decrease)
		4	only Ogre BoundingBoxes are drawn (huge performance decrease)

	-ds
		starts the dedicated server. Needed for multiplayer. This options is incompatible to all other options. The server must run on an other machine than the clients or specify another port and
		the IP of the server is by default in Tri6.h, but can be specified by command -remoteip <ip-address>

	-mm
		the client tries to automatically start the game, just like pressing "Start" in the main menu

	-dm
		Enables the Debug Mode. In Debug Mode the energy-regeneration is maxed and you can give yourself powerups and change your colour.

	-remoteip <ip-address>
		sets the remote-ip

	-remoteport <port>
		sets the port the server is listening on

	-localport <port>
		sets the port the local machine should use

	-level <levelname>
		Name of the level to be loaded. Make sure it is set to the same on server and all clients. Use just the name (without path and .xml extension)

	-loglevel <loglevel>
		Loglevel being print:
			0	Debug
			1	Info
			2	Warn
			3	Error
			4	Fatal
