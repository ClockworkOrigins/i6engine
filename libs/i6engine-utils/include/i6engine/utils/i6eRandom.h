/*
 * i6engine
 * Copyright (2016) Daniel Bonrath, Michael Baer, All rights reserved.
 *
 * This file is part of i6engine; i6engine is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * \addtogroup utils
 * @{
 */

#ifndef __I6ENGINE_UTILS_RANDOM_H__
#define __I6ENGINE_UTILS_RANDOM_H__

#include <mutex>
#include <random>

#include "i6engine/utils/Exceptions.h"
#include "i6engine/utils/Singleton.h"

#include "boost/date_time.hpp"

namespace i6e {
namespace utils {

	/**
	 * \brief creates random numbers
	 */
	class ISIXE_UTILS_API Random : public Singleton<Random> {
		friend class Singleton<Random>;

	public:
		/**
		 * \brief destructor
		 */
		~Random() {
			delete _linear;
		}

		/**
		 * \brief returns a random number in range of unsigned int
		 */
		uint32_t rand() const {
			return getRand();
		}

		/**
		 * \brief returns a random number in the range between 0 and max ([0;max[)
		 */
		uint32_t rand(uint32_t max) const {
			if (max == 0) {
				ISIXE_THROW_API("i6eRandom", "max value has to be grater than zero")
			}
			return getRand() % max;
		}

		/**
		 * \brief returns a random number in the range between min and max ([min; max[)
		 */
		uint32_t rand(uint32_t min, uint32_t max) const {
			if (min >= max) {
				ISIXE_THROW_API("i6eRandom", "max value has to be greater than min value")
			}
			return (getRand() % (max - min)) + min;
		}

		/**
		 * \brief sets a random seed value
		 */
		void setSeed(uint32_t seed) {
			std::lock_guard<std::mutex> l(_lock);
			_linear->seed(seed);
		}

	private:
		/**
		 * \brief random generator
		 */
		std::minstd_rand * _linear;

		/**
		 * \brief lock for multithreaded access
		 */
		mutable std::mutex _lock;

		/**
		 * \brief returns the random number generated by intern generator
		 */
		uint32_t getRand() const {
			std::lock_guard<std::mutex> l(_lock);
			return (*_linear)();
		}

		/**
		 * \brief default constructor
		 */
		Random() : _linear(new std::minstd_rand(static_cast<unsigned int>(boost::posix_time::time_period(boost::posix_time::time_from_string("2010-03-19 14:23:10"), boost::posix_time::microsec_clock::universal_time()).length().total_microseconds()))), _lock() {
		}
	};

} /* namespace utils */
} /* namespace i6e */

#endif /* __I6ENGINE_UTILS_RANDOM_H__ */

/**
 * @}
 */
